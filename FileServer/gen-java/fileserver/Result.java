/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package fileserver;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2022-04-13")
public class Result implements org.apache.thrift.TBase<Result, Result._Fields>, java.io.Serializable, Cloneable, Comparable<Result> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Result");

  private static final org.apache.thrift.protocol.TField NEEDREAD_FIELD_DESC = new org.apache.thrift.protocol.TField("needread", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField RESULT_READ_FIELD_DESC = new org.apache.thrift.protocol.TField("resultRead", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RESULT_WRITE_FIELD_DESC = new org.apache.thrift.protocol.TField("resultWrite", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField READ_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("readVersion", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ResultTupleSchemeFactory();

  public boolean needread; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String resultRead; // required
  public boolean resultWrite; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String status; // required
  public int readVersion; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NEEDREAD((short)1, "needread"),
    RESULT_READ((short)2, "resultRead"),
    RESULT_WRITE((short)3, "resultWrite"),
    STATUS((short)4, "status"),
    READ_VERSION((short)5, "readVersion");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NEEDREAD
          return NEEDREAD;
        case 2: // RESULT_READ
          return RESULT_READ;
        case 3: // RESULT_WRITE
          return RESULT_WRITE;
        case 4: // STATUS
          return STATUS;
        case 5: // READ_VERSION
          return READ_VERSION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NEEDREAD_ISSET_ID = 0;
  private static final int __RESULTWRITE_ISSET_ID = 1;
  private static final int __READVERSION_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NEEDREAD, new org.apache.thrift.meta_data.FieldMetaData("needread", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RESULT_READ, new org.apache.thrift.meta_data.FieldMetaData("resultRead", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESULT_WRITE, new org.apache.thrift.meta_data.FieldMetaData("resultWrite", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.READ_VERSION, new org.apache.thrift.meta_data.FieldMetaData("readVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Result.class, metaDataMap);
  }

  public Result() {
  }

  public Result(
    boolean needread,
    java.lang.String resultRead,
    boolean resultWrite,
    java.lang.String status,
    int readVersion)
  {
    this();
    this.needread = needread;
    setNeedreadIsSet(true);
    this.resultRead = resultRead;
    this.resultWrite = resultWrite;
    setResultWriteIsSet(true);
    this.status = status;
    this.readVersion = readVersion;
    setReadVersionIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Result(Result other) {
    __isset_bitfield = other.__isset_bitfield;
    this.needread = other.needread;
    if (other.isSetResultRead()) {
      this.resultRead = other.resultRead;
    }
    this.resultWrite = other.resultWrite;
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    this.readVersion = other.readVersion;
  }

  public Result deepCopy() {
    return new Result(this);
  }

  @Override
  public void clear() {
    setNeedreadIsSet(false);
    this.needread = false;
    this.resultRead = null;
    setResultWriteIsSet(false);
    this.resultWrite = false;
    this.status = null;
    setReadVersionIsSet(false);
    this.readVersion = 0;
  }

  public boolean isNeedread() {
    return this.needread;
  }

  public Result setNeedread(boolean needread) {
    this.needread = needread;
    setNeedreadIsSet(true);
    return this;
  }

  public void unsetNeedread() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEEDREAD_ISSET_ID);
  }

  /** Returns true if field needread is set (has been assigned a value) and false otherwise */
  public boolean isSetNeedread() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEEDREAD_ISSET_ID);
  }

  public void setNeedreadIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEEDREAD_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getResultRead() {
    return this.resultRead;
  }

  public Result setResultRead(@org.apache.thrift.annotation.Nullable java.lang.String resultRead) {
    this.resultRead = resultRead;
    return this;
  }

  public void unsetResultRead() {
    this.resultRead = null;
  }

  /** Returns true if field resultRead is set (has been assigned a value) and false otherwise */
  public boolean isSetResultRead() {
    return this.resultRead != null;
  }

  public void setResultReadIsSet(boolean value) {
    if (!value) {
      this.resultRead = null;
    }
  }

  public boolean isResultWrite() {
    return this.resultWrite;
  }

  public Result setResultWrite(boolean resultWrite) {
    this.resultWrite = resultWrite;
    setResultWriteIsSet(true);
    return this;
  }

  public void unsetResultWrite() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RESULTWRITE_ISSET_ID);
  }

  /** Returns true if field resultWrite is set (has been assigned a value) and false otherwise */
  public boolean isSetResultWrite() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RESULTWRITE_ISSET_ID);
  }

  public void setResultWriteIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RESULTWRITE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getStatus() {
    return this.status;
  }

  public Result setStatus(@org.apache.thrift.annotation.Nullable java.lang.String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getReadVersion() {
    return this.readVersion;
  }

  public Result setReadVersion(int readVersion) {
    this.readVersion = readVersion;
    setReadVersionIsSet(true);
    return this;
  }

  public void unsetReadVersion() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __READVERSION_ISSET_ID);
  }

  /** Returns true if field readVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetReadVersion() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __READVERSION_ISSET_ID);
  }

  public void setReadVersionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __READVERSION_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NEEDREAD:
      if (value == null) {
        unsetNeedread();
      } else {
        setNeedread((java.lang.Boolean)value);
      }
      break;

    case RESULT_READ:
      if (value == null) {
        unsetResultRead();
      } else {
        setResultRead((java.lang.String)value);
      }
      break;

    case RESULT_WRITE:
      if (value == null) {
        unsetResultWrite();
      } else {
        setResultWrite((java.lang.Boolean)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((java.lang.String)value);
      }
      break;

    case READ_VERSION:
      if (value == null) {
        unsetReadVersion();
      } else {
        setReadVersion((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NEEDREAD:
      return isNeedread();

    case RESULT_READ:
      return getResultRead();

    case RESULT_WRITE:
      return isResultWrite();

    case STATUS:
      return getStatus();

    case READ_VERSION:
      return getReadVersion();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NEEDREAD:
      return isSetNeedread();
    case RESULT_READ:
      return isSetResultRead();
    case RESULT_WRITE:
      return isSetResultWrite();
    case STATUS:
      return isSetStatus();
    case READ_VERSION:
      return isSetReadVersion();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Result)
      return this.equals((Result)that);
    return false;
  }

  public boolean equals(Result that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_needread = true;
    boolean that_present_needread = true;
    if (this_present_needread || that_present_needread) {
      if (!(this_present_needread && that_present_needread))
        return false;
      if (this.needread != that.needread)
        return false;
    }

    boolean this_present_resultRead = true && this.isSetResultRead();
    boolean that_present_resultRead = true && that.isSetResultRead();
    if (this_present_resultRead || that_present_resultRead) {
      if (!(this_present_resultRead && that_present_resultRead))
        return false;
      if (!this.resultRead.equals(that.resultRead))
        return false;
    }

    boolean this_present_resultWrite = true;
    boolean that_present_resultWrite = true;
    if (this_present_resultWrite || that_present_resultWrite) {
      if (!(this_present_resultWrite && that_present_resultWrite))
        return false;
      if (this.resultWrite != that.resultWrite)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_readVersion = true;
    boolean that_present_readVersion = true;
    if (this_present_readVersion || that_present_readVersion) {
      if (!(this_present_readVersion && that_present_readVersion))
        return false;
      if (this.readVersion != that.readVersion)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((needread) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetResultRead()) ? 131071 : 524287);
    if (isSetResultRead())
      hashCode = hashCode * 8191 + resultRead.hashCode();

    hashCode = hashCode * 8191 + ((resultWrite) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status.hashCode();

    hashCode = hashCode * 8191 + readVersion;

    return hashCode;
  }

  @Override
  public int compareTo(Result other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetNeedread()).compareTo(other.isSetNeedread());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeedread()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.needread, other.needread);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetResultRead()).compareTo(other.isSetResultRead());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultRead()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultRead, other.resultRead);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetResultWrite()).compareTo(other.isSetResultWrite());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultWrite()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultWrite, other.resultWrite);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReadVersion()).compareTo(other.isSetReadVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.readVersion, other.readVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Result(");
    boolean first = true;

    sb.append("needread:");
    sb.append(this.needread);
    first = false;
    if (!first) sb.append(", ");
    sb.append("resultRead:");
    if (this.resultRead == null) {
      sb.append("null");
    } else {
      sb.append(this.resultRead);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("resultWrite:");
    sb.append(this.resultWrite);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("readVersion:");
    sb.append(this.readVersion);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ResultStandardScheme getScheme() {
      return new ResultStandardScheme();
    }
  }

  private static class ResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Result> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Result struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NEEDREAD
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.needread = iprot.readBool();
              struct.setNeedreadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RESULT_READ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resultRead = iprot.readString();
              struct.setResultReadIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RESULT_WRITE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.resultWrite = iprot.readBool();
              struct.setResultWriteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // READ_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.readVersion = iprot.readI32();
              struct.setReadVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Result struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NEEDREAD_FIELD_DESC);
      oprot.writeBool(struct.needread);
      oprot.writeFieldEnd();
      if (struct.resultRead != null) {
        oprot.writeFieldBegin(RESULT_READ_FIELD_DESC);
        oprot.writeString(struct.resultRead);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RESULT_WRITE_FIELD_DESC);
      oprot.writeBool(struct.resultWrite);
      oprot.writeFieldEnd();
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(READ_VERSION_FIELD_DESC);
      oprot.writeI32(struct.readVersion);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ResultTupleScheme getScheme() {
      return new ResultTupleScheme();
    }
  }

  private static class ResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Result> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Result struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetNeedread()) {
        optionals.set(0);
      }
      if (struct.isSetResultRead()) {
        optionals.set(1);
      }
      if (struct.isSetResultWrite()) {
        optionals.set(2);
      }
      if (struct.isSetStatus()) {
        optionals.set(3);
      }
      if (struct.isSetReadVersion()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetNeedread()) {
        oprot.writeBool(struct.needread);
      }
      if (struct.isSetResultRead()) {
        oprot.writeString(struct.resultRead);
      }
      if (struct.isSetResultWrite()) {
        oprot.writeBool(struct.resultWrite);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetReadVersion()) {
        oprot.writeI32(struct.readVersion);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Result struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.needread = iprot.readBool();
        struct.setNeedreadIsSet(true);
      }
      if (incoming.get(1)) {
        struct.resultRead = iprot.readString();
        struct.setResultReadIsSet(true);
      }
      if (incoming.get(2)) {
        struct.resultWrite = iprot.readBool();
        struct.setResultWriteIsSet(true);
      }
      if (incoming.get(3)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(4)) {
        struct.readVersion = iprot.readI32();
        struct.setReadVersionIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

